<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MongoDB.AspNet.Identity</name>
    </assembly>
    <members>
        <member name="T:MongoDB.AspNet.Identity.IdentityUser">
            <summary>
            Class IdentityUser.
            </summary>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.Id">
            <summary>
            Unique key for the user
            </summary>
            <value>The identifier.</value>
            <returns>The unique key for the user</returns>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.PasswordHash">
            <summary>
            Gets or sets the password hash.
            </summary>
            <value>The password hash.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.SecurityStamp">
            <summary>
            Gets or sets the security stamp.
            </summary>
            <value>The security stamp.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.Roles">
            <summary>
            Gets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.Claims">
            <summary>
            Gets the claims.
            </summary>
            <value>The claims.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.Logins">
            <summary>
            Gets the logins.
            </summary>
            <value>The logins.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.Email">
            <summary>
            Gets Email address
            </summary>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.EmailConfirmed">
            <summary>
            
            </summary>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.LockoutEndDateUtc">
            <summary>
            
            </summary>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.AccessFailedCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.LockoutEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUser.TwoFactorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.AspNet.Identity.IdentityUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.AspNet.Identity.IdentityUser"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.AspNet.Identity.IdentityUser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.AspNet.Identity.IdentityUser"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
        </member>
        <member name="T:MongoDB.AspNet.Identity.IdentityUserClaim">
            <summary>
            Class IdentityUserClaim.
            </summary>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUserClaim.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUserClaim.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUserClaim.ClaimType">
            <summary>
            Gets or sets the type of the claim.
            </summary>
            <value>The type of the claim.</value>
        </member>
        <member name="P:MongoDB.AspNet.Identity.IdentityUserClaim.ClaimValue">
            <summary>
            Gets or sets the claim value.
            </summary>
            <value>The claim value.</value>
        </member>
        <member name="T:MongoDB.AspNet.Identity.UserStore`1">
            <summary>
                Class UserStore.
            </summary>
            <typeparam name="TUser">The type of the t user.</typeparam>
        </member>
        <member name="F:MongoDB.AspNet.Identity.UserStore`1.db">
            <summary>
                The database
            </summary>
        </member>
        <member name="F:MongoDB.AspNet.Identity.UserStore`1._disposed">
            <summary>
                The _disposed
            </summary>
        </member>
        <member name="F:MongoDB.AspNet.Identity.UserStore`1.collectionName">
            <summary>
            The AspNetUsers collection name
            </summary>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetDatabaseFromSqlStyle(System.String)">
            <summary>
                Gets the database from connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>MongoDatabase.</returns>
            <exception cref="T:System.Exception">No database name specified in connection string</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetDatabaseFromUrl(MongoDB.Driver.MongoUrl)">
            <summary>
                Gets the database from URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetDatabase(System.String,System.String)">
            <summary>
                Uses connectionString to connect to server and then uses databae name specified.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="dbName">Name of the database.</param>
            <returns>MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MongoDB.AspNet.Identity.UserStore`1" /> class. Uses DefaultConnection name if none was
                specified.
            </summary>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:MongoDB.AspNet.Identity.UserStore`1" /> class. Uses name from ConfigurationManager or a
                mongodb:// Url.
            </summary>
            <param name="connectionNameOrUrl">The connection name or URL.</param>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:MongoDB.AspNet.Identity.UserStore`1" /> class. Uses name from ConfigurationManager or a
                mongodb:// Url.
                Database can be specified separately from connection server.
            </summary>
            <param name="connectionNameOrUrl">The connection name or URL.</param>
            <param name="dbName">Name of the database.</param>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.#ctor(MongoDB.Driver.IMongoDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.AspNet.Identity.UserStore`1"/> class using a already initialized Mongo Database.
            </summary>
            <param name="mongoDatabase">The mongo database.</param>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.AddClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
                Adds the claim asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="claim">The claim.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetClaimsAsync(`0)">
            <summary>
                Gets the claims asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task{IList{Claim}}.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
                Removes the claim asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="claim">The claim.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.CreateAsync(`0)">
            <summary>
                Creates the user asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.DeleteAsync(`0)">
            <summary>
                Deletes the user asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.FindByIdAsync(System.String)">
            <summary>
                Finds the by identifier asynchronous.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>Task{`0}.</returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.FindByNameAsync(System.String)">
            <summary>
                Finds the by name asynchronous.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns>Task{`0}.</returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.UpdateAsync(`0)">
            <summary>
                Updates the user asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.AddLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
                Adds the login asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="login">The login.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.FindAsync(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
                Finds the user asynchronous.
            </summary>
            <param name="login">The login.</param>
            <returns>Task{`0}.</returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetLoginsAsync(`0)">
            <summary>
                Gets the logins asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task{IList{UserLoginInfo}}.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.RemoveLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
                Removes the login asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="login">The login.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetPasswordHashAsync(`0)">
            <summary>
                Gets the password hash asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task{System.String}.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.HasPasswordAsync(`0)">
            <summary>
                Determines whether [has password asynchronous] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.SetPasswordHashAsync(`0,System.String)">
            <summary>
                Sets the password hash asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="passwordHash">The password hash.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.AddToRoleAsync(`0,System.String)">
            <summary>
                Adds to role asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="role">The role.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetRolesAsync(`0)">
            <summary>
                Gets the roles asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task{IList{System.String}}.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.IsInRoleAsync(`0,System.String)">
            <summary>
                Determines whether [is in role asynchronous] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <param name="role">The role.</param>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.RemoveFromRoleAsync(`0,System.String)">
            <summary>
                Removes from role asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="role">The role.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetSecurityStampAsync(`0)">
            <summary>
                Gets the security stamp asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns>Task{System.String}.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.SetSecurityStampAsync(`0,System.String)">
            <summary>
                Sets the security stamp asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="stamp">The stamp.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.ThrowIfDisposed">
            <summary>
                Throws if disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.SetEmailAsync(`0,System.String)">
            <summary>Set the user email</summary>
            <param name="user"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetEmailAsync(`0)">
            <summary>Get the user email</summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetEmailConfirmedAsync(`0)">
            <summary>Returns true if the user email is confirmed</summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.SetEmailConfirmedAsync(`0,System.Boolean)">
            <summary>Sets whether the user email is confirmed</summary>
            <param name="user"></param>
            <param name="confirmed"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.FindByEmailAsync(System.String)">
            <summary>Returns the user associated with this email</summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetLockoutEndDateAsync(`0)">
            <summary>
                Returns the DateTimeOffset that represents the end of a user's lockout, any time in the past should be considered
                not locked out.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.SetLockoutEndDateAsync(`0,System.DateTimeOffset)">
            <summary>
                Locks a user out until the specified end date (set to a past date, to unlock a user)
            </summary>
            <param name="user"></param>
            <param name="lockoutEnd"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.IncrementAccessFailedCountAsync(`0)">
            <summary>
                Used to record when an attempt to access the user has failed
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.ResetAccessFailedCountAsync(`0)">
            <summary>
                Used to reset the access failed count, typically after the account is successfully accessed
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetAccessFailedCountAsync(`0)">
            <summary>
                Returns the current number of failed access attempts.  This number usually will be reset whenever the password is
                verified or the account is locked out.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetLockoutEnabledAsync(`0)">
            <summary>Returns whether the user can be locked out.</summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.SetLockoutEnabledAsync(`0,System.Boolean)">
            <summary>Sets whether the user can be locked out.</summary>
            <param name="user"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean)">
            <summary>
                Sets whether two factor authentication is enabled for the user
            </summary>
            <param name="user"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.UserStore`1.GetTwoFactorEnabledAsync(`0)">
            <summary>
                Returns whether two factor authentication is enabled for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.AspNet.Identity.Utils.ToIList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an IEnumberable of T to a IList of T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>IList{``0}.</returns>
        </member>
    </members>
</doc>
